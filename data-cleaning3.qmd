---
title: "data-cleaning3"
format: html
editor: visual
---

## Load packages

```{r}
library(tidyverse)
library(dlookr)
library(skimr)
```

## Import data

```{r}
CustomerDemographic <- read.csv('cleansed data 2/CustomerDemographic.csv')
CustomerAddress <- read.csv('cleansed data 2/CustomerAddress.csv')
Transactions <- read.csv('cleansed data 2/Transactions.csv')
NewCustomerList <- read.csv('cleansed data 2/NewCustomerList.csv')
```


```{r}
# data after gender imputation but before mice imputation
CD_before_impute2 <- read.csv('cleansed data 2/CD_before_impute2.csv')
NCL_before_impute2 <- read.csv('cleansed data 2/NCL_before_impute2.csv')

# CustomerAddress needed no imputation as it had no missing values
# Transactions missing values were removed
```


```{r}
# in CD_before_impute2, get the customers/rows 
# that have missing values in job_title
CD_before_impute2[is.na(CD_before_impute2$job_title),]
# get the index of the customers/rows that have missing values in job_title
which(is.na(CD_before_impute2$job_title))
```

```{r}
# in CustomerDemographic, get the customers/rows 
# that have missing values in job_title
CustomerDemographic[is.na(CustomerDemographic$job_title),]
# get the index of the customers/rows that have missing values in job_title
which(is.na(CustomerDemographic$job_title))
```



## Join data

Check if customer_id values in CustomerDemographic are also in CustomerAddress
```{r}
sum(CustomerDemographic$customer_id %in% CustomerAddress$customer_id)
nrow(CustomerDemographic)
```
4 customers don't have address information.


Check if customer_id values in CustomerDemographic are also in Transactions
```{r}
sum(CustomerDemographic$customer_id %in% Transactions$customer_id)
nrow(CustomerDemographic)
```
3997 - 3489 = 508 customers don't have transaction information or never made a purchase in 2017.


Create a profit column in Transactions
```{r}
Transactions$profit <- Transactions$list_price - Transactions$standard_cost
```


Split address column in CustomerAddress into street number and street name
using 
```{r}
CustomerAddress <- separate(CustomerAddress, address, into = c("street_number", "street_name"), sep = " ", remove = FALSE, extra = "merge")
# extra = "merge" to indicate that any additional separators should be merged back 
# into the last column. This is for cases where street names have spaces.

head(CustomerAddress)
```

```{r}
# remove address column
CustomerAddress <- CustomerAddress |> select(-address)
```


Split address column in NewCustomerList into street number and street name
using 
```{r}
NewCustomerList <- separate(NewCustomerList, address, into = c("street_number", "street_name"), sep = " ", remove = FALSE, extra = "merge")
# extra = "merge" to indicate that any additional separators should be merged back 
# into the last column. This is for cases where street names have spaces.

head(NewCustomerList)
```


```{r}
# remove address column
NewCustomerList <- NewCustomerList |> select(-address)
```



Join CustomerDemographic and CustomerAddress
```{r}
CD_CA <- inner_join(CustomerDemographic, CustomerAddress, by = 'customer_id')
```

Join CD_CA and Transactions
```{r}
CD_CA_T <- left_join(CD_CA, Transactions, by = 'customer_id')
```


Subset CD_CA_T to customers that don't have transaction data.
```{r}
CD_CA_T_no_transaction <- CD_CA_T[is.na(CD_CA_T$transaction_id),]
```


Subset CD_CA_T to customers that have transaction data.
```{r}
CD_CA_T <- CD_CA_T[!is.na(CD_CA_T$transaction_id),]
```



Convert to proper data types
```{r}
# for column that contains 'date', convert to date type
CD_CA_T$product_first_sold_date <- as.Date(CD_CA_T$product_first_sold_date)
CD_CA_T$transaction_date <- as.Date(CD_CA_T$transaction_date)

# convert to factor type
CD_CA_T$gender <- as.factor(CD_CA_T$gender)
CD_CA_T$job_title <- as.factor(CD_CA_T$job_title)
CD_CA_T$job_industry_category <- as.factor(CD_CA_T$job_industry_category)
CD_CA_T$wealth_segment <- factor(
  CD_CA_T$wealth_segment,
  ordered = TRUE,
  levels = c('Mass Customer', 'Affluent Customer', 'High Net Worth'))
CD_CA_T$owns_car <- as.factor(CD_CA_T$owns_car)
CD_CA_T$state <- as.factor(CD_CA_T$state)
CD_CA_T$country <- as.factor(CD_CA_T$country)
CD_CA_T$online_order <- as.factor(CD_CA_T$online_order)
CD_CA_T$brand <- as.factor(CD_CA_T$brand)
CD_CA_T$product_line <- as.factor(CD_CA_T$product_line)
CD_CA_T$product_class <- factor(CD_CA_T$product_class, 
                                     ordered = TRUE,
                                     levels = c('low', 'medium', 'high'))
CD_CA_T$product_size <- factor(CD_CA_T$product_size, 
                                    ordered = TRUE,
                                    levels = c('small', 'medium', 'large'))
```


```{r}
skim(CD_CA)
```


```{r}
skim(CD_CA_T)
```


## Label data (define target)

### RFM Analysis

Calculate Recency, Frequency, and Monetary Value (RFM) for each customer
* Recency: the number of days since the last purchase
* Frequency: the number of purchases made in the last 12 months
* Monetary Value: the total amount of money spent in the last 12 months



Firstly, let's set their RFM_Score as 000 and Target as Low-Value for CD_CA_T_no_transaction
since they have no transaction data.
```{r}
CD_CA_T_no_transaction$RFM_Score <- as.numeric(0)
CD_CA_T_no_transaction$Target <- 'Low-Value'
```



```{r}
# to calculate recency score for each customer, first group by customer_id,
# then get the latest value of transaction_date for each customer_id
# then get the difference between the latest transaction_date and today's date
CD_CA_T |> 
  group_by(customer_id) |> 
  summarize(recency = max(transaction_date)) |> 
  mutate(recency = as.integer(today()  - recency)) |> 
  select(customer_id, recency)

# use today() or max(transaction_date)?
```

```{r}
# get info for customer_id 1 for spot checking
CD_CA_T |> 
  filter(customer_id == 1) |> 
  select(customer_id, transaction_date) |> 
  arrange(desc(transaction_date))
```

```{r}
CD_CA_T |> 
  filter(customer_id == 2) |> 
  select(customer_id, transaction_date) |> 
  arrange(desc(transaction_date))
```



```{r}
# Calculate Recency, Frequency, Monetary metrics
RFM <- CD_CA_T %>%
  group_by(customer_id) %>%
  summarize(Recency = as.integer(difftime(today(), max(transaction_date), units = "days")),
            Frequency = n(),
            Monetary = sum(profit))

head(RFM)
```




```{r}
# Assign scores based on quartiles
RFM$Recency_Score <- cut(RFM$Recency, 
                         breaks = quantile(
                           RFM$Recency, 
                           probs = seq(0, 1, 0.25)), labels = FALSE, 
                         include.lowest = TRUE, right = TRUE)

RFM$Frequency_Score <- cut(RFM$Frequency, 
                           breaks = quantile(
                             RFM$Frequency, 
                             probs = seq(0, 1, 0.25)), labels = FALSE, 
                           include.lowest = TRUE, right = TRUE)

RFM$Monetary_Score <- cut(RFM$Monetary, 
                          breaks = quantile(
                            RFM$Monetary, 
                            probs = seq(0, 1, 0.25)), labels = FALSE, 
                          include.lowest = TRUE, right = TRUE)

```


```{r}
quantile(RFM$Recency,
         probs = seq(0, 1, 0.25))
writeLines("\n")

quantile(RFM$Frequency,
         probs = seq(0, 1, 0.25), 
         type = 6)
writeLines("\n")

quantile(RFM$Monetary,
         probs = seq(0, 1, 0.25), 
         type = 6)
```


```{r}
# lower values receive higher scores for Recency
RFM$Recency_Score <- cut(RFM$Recency, 
                         breaks = quantile(
                           RFM$Recency, 
                           probs = seq(0, 1, 0.25)), 
                         labels = FALSE, 
                         include.lowest = TRUE, 
                         right = TRUE)
# Reverse the order of labels for Recency_Score
RFM$Recency_Score <- max(RFM$Recency_Score) - RFM$Recency_Score + 1


RFM$Frequency_Score <- cut(RFM$Frequency, 
                           breaks = quantile(
                             RFM$Frequency, 
                             probs = seq(0, 1, 0.25), 
                             type = 6), 
                           labels = FALSE, 
                           include.lowest = TRUE, 
                           right = TRUE)

RFM$Monetary_Score <- cut(RFM$Monetary, 
                          breaks = quantile(
                            RFM$Monetary, 
                            probs = seq(0, 1, 0.25), 
                            type = 6), 
                          labels = FALSE, 
                          include.lowest = TRUE, 
                          right = TRUE)

```


```{r}
# Combine scores into RFM scores
rfm_scores <- RFM %>%
  select(customer_id, Recency_Score, Frequency_Score, Monetary_Score) %>%
  mutate(RFM_Score = 100*Recency_Score + 10*Frequency_Score + Monetary_Score)

head(rfm_scores)
```

```{r}
quantile(as.numeric(rfm_scores$RFM_Score),
         probs = seq(0, 1, 0.33))
```


```{r}
# Define Target Variable based on RFM scores
rfm_scores$Target <- cut(as.numeric(rfm_scores$RFM_Score), 
                         breaks = quantile(
                           as.numeric(rfm_scores$RFM_Score), 
                           probs = seq(0, 1, 0.33)),
                         labels = c('Low-Value', 'Mid-Value', 'High-Value'),
                         include.lowest = TRUE, 
                          right = TRUE)
```


```{r}
# join RFM scores and target variable with customer demographics
CD_CA_T <- inner_join(CD_CA_T,
                      rfm_scores[c('customer_id', 'RFM_Score', 'Target')],
                      by = 'customer_id')
```


```{r}
# plot distribution of Target variable
CD_CA_T %>%
  ggplot(aes(x = Target)) +
  geom_bar() +
  labs(title = 'Distribution of Target Variable',
       x = 'Target',
       y = 'Count')

table(CD_CA_T$Target)
```

```{r}
# change Target to factor type ordered as Low-Value, Mid-Value, High-Value
CD_CA_T$Target <- factor(CD_CA_T$Target, 
                         levels = c('Low-Value', 'Mid-Value', 'High-Value'),
                         ordered = TRUE)
```

```{r}
# compute the mean of each score for each Target group in rfm_scores
rfm_scores %>%
  group_by(Target) %>%
  summarize(Recency_Score = mean(Recency_Score),
            Frequency_Score = mean(Frequency_Score),
            Monetary_Score = mean(Monetary_Score),
            RFM_Score = mean(RFM_Score))
```


### Create final set

Append CD_CA_T with CD_CA_T_no_transaction.
```{r}
CD_CA_T <- rbind(CD_CA_T, CD_CA_T_no_transaction)
```

remove duplicates in CD_CA_T (due to previously merging with Transactions data set)
```{r}
CD_CA_T <- CD_CA_T[!duplicated(CD_CA_T$customer_id), ]
```


Now, create the final train set with target.
```{r}
# join Target with CD_CA
final_dataset <- inner_join(CD_CA,
                      CD_CA_T[c('customer_id', 'Target')],
                      by = 'customer_id')

head(final_dataset)
```




```{r}
colnames(NewCustomerList)
```

```{r}
colnames(final_dataset)
```




## Export data to csv file

```{r}
if (!file.exists("cleansed data 3")) {
  dir.create("cleansed data 3")
}

write.csv(CD_CA_T, 'cleansed data 3/CD_CA_T.csv', row.names = FALSE)
write.csv(final_dataset, 'cleansed data 3/final_dataset.csv', row.names = FALSE)
```




























